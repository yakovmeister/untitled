{"version":3,"sources":["../src/app.js"],"names":["Utility","Anime","Application","constructor","anime","utility","run","searchKey","read","console","log","searchResult","search","displayList","selectedAnimeIndex","fromUrl","url","episodes","episodeSelection","page","downloadPage","downloadURI","scrapeMP4","list","index","name","closeConsole"],"mappings":"AAAA,OAAOA,OAAP,MAAoB,WAApB;AACA,SAAQC,KAAR,QAAoB,eAApB;;AAEA,eAAe,MAAMC,WAAN,CAAkB;;AAE7BC,kBAAa;AACT,aAAKC,KAAL,GAAa;AACT;;;;;;;;AADS,SAAb;AAUA,aAAKC,OAAL,GAAe,IAAIL,OAAJ,EAAf;AACH;;AAED;;;;AAIA,KAAEM,GAAF,GAAQ;AACJ;AACA,aAAKF,KAAL,CAAWG,SAAX,GAAuB,MAAM,KAAKF,OAAL,CAAaG,IAAb,CAAkB,mCAAlB,CAA7B;;AAEA;AACAC,gBAAQC,GAAR,CAAa,0BAAyB,KAAKN,KAAL,CAAWG,SAAU,KAA3D;AACA,aAAKH,KAAL,CAAWO,YAAX,GAA0B,MAAMV,MAAMW,MAAN,CAAa,KAAKR,KAAL,CAAWG,SAAxB,CAAhC;;AAEA;AACA;AACAE,gBAAQC,GAAR,CAAa,qDAAb;AACAD,gBAAQC,GAAR,CAAa,qDAAb;AACA,aAAKG,WAAL,CAAiB,KAAKT,KAAL,CAAWO,YAA5B;AACA,aAAKP,KAAL,CAAWU,kBAAX,GAAgC,MAAM,KAAKT,OAAL,CAAaG,IAAb,CAAkB,sBAAlB,CAAtC;;AAEA;AACAC,gBAAQC,GAAR,CAAa,+BAAb;AACA,aAAKN,KAAL,CAAWA,KAAX,GAAmB,MAAMH,MAAMc,OAAN,CAAc,KAAKX,KAAL,CAAWO,YAAX,CAAwB,KAAKP,KAAL,CAAWU,kBAAnC,EAAuDE,GAArE,CAAzB;AACA,aAAKZ,KAAL,CAAWa,QAAX,GAAsB,MAAM,KAAKb,KAAL,CAAWA,KAAX,CAAiB,UAAjB,CAA5B;;AAEA;AACAK,gBAAQC,GAAR,CAAa,kCAAb;AACA,aAAKG,WAAL,EAAiB,MAAM,KAAKT,KAAL,CAAWa,QAAlC;AACA,aAAKb,KAAL,CAAWc,gBAAX,GAA8B,MAAM,KAAKb,OAAL,CAAaG,IAAb,CAAkB,kBAAlB,CAApC;;AAEA;AACAC,gBAAQC,GAAR,CAAa,mDAAb;AACA,YAAIS,OAAO,MAAM,KAAKd,OAAL,CAAae,YAAb,CAA0B,KAAKhB,KAAL,CAAWa,QAAX,CAAoB,KAAKb,KAAL,CAAWc,gBAA/B,EAAiDF,GAA3E,CAAjB;;AAEA;AACAP,gBAAQC,GAAR,CAAa,0BAAb;AACA,YAAIW,cAAc,KAAKhB,OAAL,CAAaiB,SAAb,CAAuBH,IAAvB,CAAlB;;AAEAV,gBAAQC,GAAR,CAAYW,WAAZ;AAEH;;AAED;;;;AAIAR,gBAAYU,IAAZ,EAAkB;AACd,aAAI,IAAIC,KAAR,IAAiBD,IAAjB,EAAuB;AACnBd,oBAAQC,GAAR,CAAa,IAAGc,KAAM,KAAID,KAAKC,KAAL,EAAYC,IAAK,EAA3C;AACH;AACJ;;AAED;;;AAGAC,mBAAe;AACX,aAAKrB,OAAL,CAAaqB,YAAb;AACH;AAxE4B","file":"app.js","sourcesContent":["import Utility from './utility';\nimport {Anime} from 'anime-scraper';\n\nexport default class Application {\n\n    constructor(){\n        this.anime = {\n            /**\n             * searchKey            - keyword provided by user\n             * searchResult         - results using the keyword provided by user\n             * selectedAnimeIndex   - index defined by user for searchResult\n             * anime                - object containing anime details\n             * episodes             - object containing episode details\n             * episodeSelection     - episode user wants to download\n             */\n        };\n        this.utility = new Utility();\n    }\n    \n    /**\n     * Start the application\n     * \n     */\n    * run() {\n        // stage 1: allow user to input the anime they want to watch\n        this.anime.searchKey = yield this.utility.read(\"Search an anime you wanna watch> \");\n        \n        // stage 2: search for that anime\n        console.log(`[SEARCH] Searching for ${this.anime.searchKey}...`);\n        this.anime.searchResult = yield Anime.search(this.anime.searchKey);\n        \n        // stage 3: display anime results, and save the index \n        // of the chosen anime\n        console.log(`[SEARCH] Search complete... displaying results...\\n`);\n        console.log(`---------------------------------------------------`);\n        this.displayList(this.anime.searchResult);\n        this.anime.selectedAnimeIndex = yield this.utility.read(\"Insert anime index> \");\n\n        // stage 4: get episodes\n        console.log(`[ANIME] Getting Episodes...\\n`);\n        this.anime.anime = yield Anime.fromUrl(this.anime.searchResult[this.anime.selectedAnimeIndex].url);\n        this.anime.episodes = yield this.anime.anime['episodes'];\n\n        // stage 5: display episodes\n        console.log(`[ANIME] Displaying Episodes...\\n`);\n        this.displayList(yield this.anime.episodes);\n        this.anime.episodeSelection = yield this.utility.read(\"Select episode: \");\n        \n        // stage 6: fetch download page as string\n        console.log(`[DOWN] Fetching Download Page, Matte kudasai...\\n`);\n        let page = yield this.utility.downloadPage(this.anime.episodes[this.anime.episodeSelection].url);\n        \n        // stage 7: scrape download link/s.\n        console.log(`[DOWN] Scraping links...`);\n        let downloadURI = this.utility.scrapeMP4(page);\n        \n        console.log(downloadURI);\n\n    }\n\n    /**\n     * Display list in ordered manner\n     * @param {object} list object containing anime information\n     */\n    displayList(list) {\n        for(let index in list) {\n            console.log(`[${index}]:${list[index].name}`);\n        }\n    }\n\n    /**\n     * Close readline object\n     */\n    closeConsole() {\n        this.utility.closeConsole();\n    }\n}"]}