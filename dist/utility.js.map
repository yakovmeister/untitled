{"version":3,"sources":["../src/utility.js"],"names":["readline","cloudscraper","Utility","constructor","io","createInterface","input","process","stdin","output","stdout","read","message","Promise","resolve","reject","Error","question","answer","closeConsole","close","scrapeMP4","source","match","downloadPage","url","get","error","response","body"],"mappings":"AAAA,OAAOA,QAAP,MAAqB,UAArB;AACA,OAAOC,YAAP,MAAyB,cAAzB;;AAEA,eAAe,MAAMC,OAAN,CAAc;AACzBC,kBAAc;AACV,aAAKC,EAAL,GAAUJ,SAASK,eAAT,CAAyB;AAC/BC,mBAAOC,QAAQC,KADgB;AAE/BC,oBAAQF,QAASG;AAFc,SAAzB,CAAV;AAIH;;AAED;;;;;AAKAC,SAAKC,UAAU,IAAf,EAAqB;AACjB,eAAO,IAAIC,OAAJ,CAAY,CAACC,OAAD,EAAUC,MAAV,KAAqB;AACpC,gBAAG,OAAOH,OAAP,IAAkB,QAArB,EACGG,OAAO,IAAIC,KAAJ,CAAW,8CAA6C,OAAOJ,OAAQ,SAAvE,CAAP;;AAEH,iBAAKR,EAAL,CAAQa,QAAR,CAAiBL,OAAjB,EAA2BM,MAAD,IAAY;AAClCJ,wBAAQI,MAAR;AACH,aAFD;AAGH,SAPM,CAAP;AAQH;;AAED;;;;AAIAC,mBAAe;AACX,eAAO,KAAKf,EAAL,CAAQgB,KAAR,EAAP;AACH;;AAED;;;;;AAKAC,cAAUC,MAAV,EAAkB;AACd,YAAG,OAAOA,MAAP,IAAiB,QAApB,EACI,MAAM,IAAIN,KAAJ,CAAW,iCAAgC,OAAOM,MAAO,SAAzD,CAAN;;AAEJ,YAAIC,QAAQD,OAAOC,KAAP,CAAa,qBAAb,CAAZ;;AAEA;AACA;AACA,YAAG,OAAOA,KAAP,IAAgB,OAAhB,IAA2BA,QAAQ,CAAtC,EAAyC;AACrCA,oBAAQD,OAAOC,KAAP,CAAa,sBAAb,CAAR;AACH;;AAED,eAAOA,MAAM,CAAN,CAAP;AACH;;AAED;;;;;AAKA,KAAEC,YAAF,CAAeC,GAAf,EAAoB;AAChB,eAAO,IAAIZ,OAAJ,CAAY,CAACC,OAAD,EAAUC,MAAV,KAAqB;AACpCd,yBAAayB,GAAb,CAAiBD,GAAjB,EAAsB,CAACE,KAAD,EAAQC,QAAR,EAAkBC,IAAlB,KAA2B;AAC7C,oBAAGF,KAAH,EAAUZ,OAAOY,KAAP;;AAEVb,wBAAQe,IAAR;AACH,aAJD;AAKH,SANM,CAAP;AAOH;AAjEwB","file":"utility.js","sourcesContent":["import readline from 'readline';\nimport cloudscraper from 'cloudscraper';\n\nexport default class Utility {\n    constructor() {\n        this.io = readline.createInterface({\n            input: process.stdin,\n            output: process. stdout\n        });\n    }\n\n    /**\n     * Read input from user\n     * @param {string} message\n     * @param {function} callback\n     */\n    read(message = \": \") {\n        return new Promise((resolve, reject) => {    \n            if(typeof message != \"string\")\n               reject(new Error(`read: first argument is expecting a string ${typeof message} given.`)); \n\n            this.io.question(message, (answer) => {\n                resolve(answer);\n            });\n        });\n    }\n\n    /**\n     * Close readline instance\n     * @return {readline} close()\n     */\n    closeConsole() {\n        return this.io.close();\n    }\n\n    /**\n     * Scrape video link from string convert HTML.\n     * @param {string} source\n     * @return {string} matched video URL.\n     */\n    scrapeMP4(source) {\n        if(typeof source != \"string\")\n            throw new Error(`scrapeMP4: expecting a string ${typeof source} given.`);\n        \n        let match = source.match(/http:\\/\\/(.*?).mp4/g);\n        \n        // if there's no video link found using http protocol \n        // try to match source with https instead.\n        if(typeof match == \"array\" && match < 0) {\n            match = source.match(/https:\\/\\/(.*?).mp4/g);\n        }\n\n        return match[0];\n    }\n\n    /**\n     * \n     * @param {string} url\n     * @return {Promise}\n     */\n    * downloadPage(url) {\n        return new Promise((resolve, reject) => {\n            cloudscraper.get(url, (error, response, body) => {\n                if(error) reject(error);\n\n                resolve(body);\n            });\n        });\n    }\n}"]}